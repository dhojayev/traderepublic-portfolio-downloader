// Code generated by MockGen. DO NOT EDIT.
// Source: eventbus.go
//
// Generated by this command:
//
//	mockgen -source=eventbus.go -destination eventbus_mock_gen.go -package=bus
//

// Package bus is a generated GoMock package.
package bus

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventBusInterface is a mock of EventBusInterface interface.
type MockEventBusInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusInterfaceMockRecorder
	isgomock struct{}
}

// MockEventBusInterfaceMockRecorder is the mock recorder for MockEventBusInterface.
type MockEventBusInterfaceMockRecorder struct {
	mock *MockEventBusInterface
}

// NewMockEventBusInterface creates a new mock instance.
func NewMockEventBusInterface(ctrl *gomock.Controller) *MockEventBusInterface {
	mock := &MockEventBusInterface{ctrl: ctrl}
	mock.recorder = &MockEventBusInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBusInterface) EXPECT() *MockEventBusInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEventBusInterface) Publish(arg0 Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0)
}

// Publish indicates an expected call of Publish.
func (mr *MockEventBusInterfaceMockRecorder) Publish(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBusInterface)(nil).Publish), arg0)
}

// Subscribe mocks base method.
func (m *MockEventBusInterface) Subscribe(arg0 string, arg1 EventHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0, arg1)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEventBusInterfaceMockRecorder) Subscribe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventBusInterface)(nil).Subscribe), arg0, arg1)
}
