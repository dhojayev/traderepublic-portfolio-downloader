// Code generated by MockGen. DO NOT EDIT.
// Source: client_interface.go
//
// Generated by this command:
//
//	mockgen -source=client_interface.go -destination client_mock.go -package=websocketclient
//

// Package websocketclient is a generated GoMock package.
package websocketclient

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientInterface)(nil).Close))
}

// Connect mocks base method.
func (m *MockClientInterface) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockClientInterfaceMockRecorder) Connect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClientInterface)(nil).Connect), ctx)
}

// SubscribeToTimelineDetail mocks base method.
func (m *MockClientInterface) SubscribeToTimelineDetail(ctx context.Context, itemID string) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTimelineDetail", ctx, itemID)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToTimelineDetail indicates an expected call of SubscribeToTimelineDetail.
func (mr *MockClientInterfaceMockRecorder) SubscribeToTimelineDetail(ctx, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTimelineDetail", reflect.TypeOf((*MockClientInterface)(nil).SubscribeToTimelineDetail), ctx, itemID)
}

// SubscribeToTimelineTransactions mocks base method.
func (m *MockClientInterface) SubscribeToTimelineTransactions(ctx context.Context) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTimelineTransactions", ctx)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToTimelineTransactions indicates an expected call of SubscribeToTimelineTransactions.
func (mr *MockClientInterfaceMockRecorder) SubscribeToTimelineTransactions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTimelineTransactions", reflect.TypeOf((*MockClientInterface)(nil).SubscribeToTimelineTransactions), ctx)
}

// SubscribeToTimelineTransactionsWithCursor mocks base method.
func (m *MockClientInterface) SubscribeToTimelineTransactionsWithCursor(ctx context.Context, cursor string) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTimelineTransactionsWithCursor", ctx, cursor)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToTimelineTransactionsWithCursor indicates an expected call of SubscribeToTimelineTransactionsWithCursor.
func (mr *MockClientInterfaceMockRecorder) SubscribeToTimelineTransactionsWithCursor(ctx, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTimelineTransactionsWithCursor", reflect.TypeOf((*MockClientInterface)(nil).SubscribeToTimelineTransactionsWithCursor), ctx, cursor)
}
