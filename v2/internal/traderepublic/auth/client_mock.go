// Code generated by MockGen. DO NOT EDIT.
// Source: client_interface.go
//
// Generated by this command:
//
//	mockgen -source=client_interface.go -destination client_mock.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockClientInterface) Login(phoneNumber PhoneNumber, pin Pin) (ProcessID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", phoneNumber, pin)
	ret0, _ := ret[0].(ProcessID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockClientInterfaceMockRecorder) Login(phoneNumber, pin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClientInterface)(nil).Login), phoneNumber, pin)
}

// ProvideOTP mocks base method.
func (m *MockClientInterface) ProvideOTP(processID ProcessID, otp OTP) (Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvideOTP", processID, otp)
	ret0, _ := ret[0].(Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvideOTP indicates an expected call of ProvideOTP.
func (mr *MockClientInterfaceMockRecorder) ProvideOTP(processID, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvideOTP", reflect.TypeOf((*MockClientInterface)(nil).ProvideOTP), processID, otp)
}
