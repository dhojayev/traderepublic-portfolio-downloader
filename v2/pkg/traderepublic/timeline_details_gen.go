// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package traderepublic

import "encoding/json"
import "fmt"
import "reflect"
import "regexp"
import "time"

type BannerSection struct {
	// ActionableTitle corresponds to the JSON schema field "actionableTitle".
	ActionableTitle *BannerSectionActionableTitle `json:"actionableTitle,omitempty" yaml:"actionableTitle,omitempty" mapstructure:"actionableTitle,omitempty"`

	// Title corresponds to the JSON schema field "title".
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type BannerSectionActionableTitle struct {
	// Action corresponds to the JSON schema field "action".
	Action DeeplinkAction `json:"action" yaml:"action" mapstructure:"action"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BannerSectionActionableTitle) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["action"]; raw != nil && !ok {
		return fmt.Errorf("field action in BannerSectionActionableTitle: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in BannerSectionActionableTitle: required")
	}
	type Plain BannerSectionActionableTitle
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = BannerSectionActionableTitle(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BannerSection) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in BannerSection: required")
	}
	type Plain BannerSection
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = BannerSection(plain)
	return nil
}

type BenefitRow struct {
	// Detail corresponds to the JSON schema field "detail".
	Detail BenefitRowDetail `json:"detail" yaml:"detail" mapstructure:"detail"`

	// Style corresponds to the JSON schema field "style".
	Style BenefitRowStyle `json:"style" yaml:"style" mapstructure:"style"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

type BenefitRowDetail struct {
	// Action corresponds to the JSON schema field "action".
	Action *BenefitRowDetailAction `json:"action,omitempty" yaml:"action,omitempty" mapstructure:"action,omitempty"`

	// Amount corresponds to the JSON schema field "amount".
	Amount *string `json:"amount,omitempty" yaml:"amount,omitempty" mapstructure:"amount,omitempty"`

	// Icon corresponds to the JSON schema field "icon".
	Icon *string `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status *BenefitRowDetailStatus `json:"status,omitempty" yaml:"status,omitempty" mapstructure:"status,omitempty"`

	// Subtitle corresponds to the JSON schema field "subtitle".
	Subtitle *string `json:"subtitle,omitempty" yaml:"subtitle,omitempty" mapstructure:"subtitle,omitempty"`

	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp time.Time `json:"timestamp" yaml:"timestamp" mapstructure:"timestamp"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type BenefitRowDetailAction struct {
	// Type corresponds to the JSON schema field "type".
	Type BenefitRowDetailActionType `json:"type" yaml:"type" mapstructure:"type"`
}

type BenefitRowDetailActionType string

const BenefitRowDetailActionTypeBenefitsSavebackOverview BenefitRowDetailActionType = "benefitsSavebackOverview"

var enumValues_BenefitRowDetailActionType = []interface{}{
	"benefitsSavebackOverview",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BenefitRowDetailActionType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BenefitRowDetailActionType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BenefitRowDetailActionType, v)
	}
	*j = BenefitRowDetailActionType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BenefitRowDetailAction) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in BenefitRowDetailAction: required")
	}
	type Plain BenefitRowDetailAction
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = BenefitRowDetailAction(plain)
	return nil
}

type BenefitRowDetailStatus string

const BenefitRowDetailStatusExecuted BenefitRowDetailStatus = "executed"

var enumValues_BenefitRowDetailStatus = []interface{}{
	"executed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BenefitRowDetailStatus) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BenefitRowDetailStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BenefitRowDetailStatus, v)
	}
	*j = BenefitRowDetailStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BenefitRowDetail) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["timestamp"]; raw != nil && !ok {
		return fmt.Errorf("field timestamp in BenefitRowDetail: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in BenefitRowDetail: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in BenefitRowDetail: required")
	}
	type Plain BenefitRowDetail
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if plain.Amount != nil {
		if matched, _ := regexp.MatchString(`^[0-9]+,[0-9]{2} €$`, string(*plain.Amount)); !matched {
			return fmt.Errorf("field %s pattern match: must match %s", "Amount", `^[0-9]+,[0-9]{2} €$`)
		}
	}
	if plain.Icon != nil {
		if matched, _ := regexp.MatchString(`^logos/[A-Z0-9]+/v2$`, string(*plain.Icon)); !matched {
			return fmt.Errorf("field %s pattern match: must match %s", "Icon", `^logos/[A-Z0-9]+/v2$`)
		}
	}
	*j = BenefitRowDetail(plain)
	return nil
}

type BenefitRowStyle string

const BenefitRowStylePlain BenefitRowStyle = "plain"

var enumValues_BenefitRowStyle = []interface{}{
	"plain",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BenefitRowStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BenefitRowStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BenefitRowStyle, v)
	}
	*j = BenefitRowStyle(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BenefitRow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["detail"]; raw != nil && !ok {
		return fmt.Errorf("field detail in BenefitRow: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in BenefitRow: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in BenefitRow: required")
	}
	type Plain BenefitRow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = BenefitRow(plain)
	return nil
}

type CryptoTransactionRow struct {
	// Detail corresponds to the JSON schema field "detail".
	Detail CryptoTransactionRowDetail `json:"detail" yaml:"detail" mapstructure:"detail"`

	// Style corresponds to the JSON schema field "style".
	Style CryptoTransactionRowStyle `json:"style" yaml:"style" mapstructure:"style"`

	// Title corresponds to the JSON schema field "title".
	Title CryptoTransactionRowTitle `json:"title" yaml:"title" mapstructure:"title"`
}

type CryptoTransactionRowDetail struct {
	// Action corresponds to the JSON schema field "action".
	Action *map[string]interface{} `json:"action,omitempty" yaml:"action,omitempty" mapstructure:"action,omitempty"`

	// DisplayValue corresponds to the JSON schema field "displayValue".
	DisplayValue *map[string]interface{} `json:"displayValue,omitempty" yaml:"displayValue,omitempty" mapstructure:"displayValue,omitempty"`

	// FunctionalStyle corresponds to the JSON schema field "functionalStyle".
	FunctionalStyle *CryptoTransactionRowDetailFunctionalStyle `json:"functionalStyle,omitempty" yaml:"functionalStyle,omitempty" mapstructure:"functionalStyle,omitempty"`

	// Text corresponds to the JSON schema field "text".
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`

	// Trend corresponds to the JSON schema field "trend".
	Trend *CryptoTransactionRowDetailTrend `json:"trend,omitempty" yaml:"trend,omitempty" mapstructure:"trend,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type CryptoTransactionRowDetailType `json:"type" yaml:"type" mapstructure:"type"`
}

type CryptoTransactionRowDetailFunctionalStyle string

const CryptoTransactionRowDetailFunctionalStyleEXECUTED CryptoTransactionRowDetailFunctionalStyle = "EXECUTED"

var enumValues_CryptoTransactionRowDetailFunctionalStyle = []interface{}{
	"EXECUTED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoTransactionRowDetailFunctionalStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoTransactionRowDetailFunctionalStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoTransactionRowDetailFunctionalStyle, v)
	}
	*j = CryptoTransactionRowDetailFunctionalStyle(v)
	return nil
}

type CryptoTransactionRowDetailTrend struct {
	Value interface{}
}

// MarshalJSON implements json.Marshaler.
func (j *CryptoTransactionRowDetailTrend) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_CryptoTransactionRowDetailTrend = []interface{}{
	"positive",
	"negative",
	nil,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoTransactionRowDetailTrend) UnmarshalJSON(value []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(value, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoTransactionRowDetailTrend {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoTransactionRowDetailTrend, v.Value)
	}
	*j = CryptoTransactionRowDetailTrend(v)
	return nil
}

type CryptoTransactionRowDetailType string

const CryptoTransactionRowDetailTypeStatus CryptoTransactionRowDetailType = "status"
const CryptoTransactionRowDetailTypeText CryptoTransactionRowDetailType = "text"

var enumValues_CryptoTransactionRowDetailType = []interface{}{
	"status",
	"text",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoTransactionRowDetailType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoTransactionRowDetailType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoTransactionRowDetailType, v)
	}
	*j = CryptoTransactionRowDetailType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoTransactionRowDetail) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in CryptoTransactionRowDetail: required")
	}
	type Plain CryptoTransactionRowDetail
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if plain.Text != nil {
		if matched, _ := regexp.MatchString(`^([0-9]+,[0-9]{2} [€$]|[0-9]+,[0-9]{6}|[+-]? ?[0-9]+,[0-9]{2} [€$]|[0-9]+,[0-9]{2} %|[A-Za-z ]+)$`, string(*plain.Text)); !matched {
			return fmt.Errorf("field %s pattern match: must match %s", "Text", `^([0-9]+,[0-9]{2} [€$]|[0-9]+,[0-9]{6}|[+-]? ?[0-9]+,[0-9]{2} [€$]|[0-9]+,[0-9]{2} %|[A-Za-z ]+)$`)
		}
	}
	*j = CryptoTransactionRowDetail(plain)
	return nil
}

type CryptoTransactionRowStyle string

const CryptoTransactionRowStyleHighlighted CryptoTransactionRowStyle = "highlighted"
const CryptoTransactionRowStylePlain CryptoTransactionRowStyle = "plain"

var enumValues_CryptoTransactionRowStyle = []interface{}{
	"plain",
	"highlighted",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoTransactionRowStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoTransactionRowStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoTransactionRowStyle, v)
	}
	*j = CryptoTransactionRowStyle(v)
	return nil
}

type CryptoTransactionRowTitle string

const CryptoTransactionRowTitleAktienkurs CryptoTransactionRowTitle = "Aktienkurs"
const CryptoTransactionRowTitleAnteile CryptoTransactionRowTitle = "Anteile"
const CryptoTransactionRowTitleAsset CryptoTransactionRowTitle = "Asset"
const CryptoTransactionRowTitleGebühr CryptoTransactionRowTitle = "Gebühr"
const CryptoTransactionRowTitleGesamt CryptoTransactionRowTitle = "Gesamt"
const CryptoTransactionRowTitleGewinn CryptoTransactionRowTitle = "Gewinn"
const CryptoTransactionRowTitleOrderart CryptoTransactionRowTitle = "Orderart"
const CryptoTransactionRowTitleRendite CryptoTransactionRowTitle = "Rendite"
const CryptoTransactionRowTitleStatus CryptoTransactionRowTitle = "Status"

var enumValues_CryptoTransactionRowTitle = []interface{}{
	"Status",
	"Orderart",
	"Asset",
	"Rendite",
	"Gewinn",
	"Anteile",
	"Aktienkurs",
	"Gebühr",
	"Gesamt",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoTransactionRowTitle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoTransactionRowTitle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoTransactionRowTitle, v)
	}
	*j = CryptoTransactionRowTitle(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoTransactionRow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["detail"]; raw != nil && !ok {
		return fmt.Errorf("field detail in CryptoTransactionRow: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in CryptoTransactionRow: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in CryptoTransactionRow: required")
	}
	type Plain CryptoTransactionRow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = CryptoTransactionRow(plain)
	return nil
}

type DeeplinkAction struct {
	// Payload corresponds to the JSON schema field "payload".
	Payload DeeplinkActionPayload `json:"payload" yaml:"payload" mapstructure:"payload"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type DeeplinkActionPayload struct {
	// Link corresponds to the JSON schema field "link".
	Link string `json:"link" yaml:"link" mapstructure:"link"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeeplinkActionPayload) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["link"]; raw != nil && !ok {
		return fmt.Errorf("field link in DeeplinkActionPayload: required")
	}
	type Plain DeeplinkActionPayload
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if matched, _ := regexp.MatchString(`^traderepublic://[a-z/-]+$`, string(plain.Link)); !matched {
		return fmt.Errorf("field %s pattern match: must match %s", "Link", `^traderepublic://[a-z/-]+$`)
	}
	*j = DeeplinkActionPayload(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeeplinkAction) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["payload"]; raw != nil && !ok {
		return fmt.Errorf("field payload in DeeplinkAction: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in DeeplinkAction: required")
	}
	type Plain DeeplinkAction
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = DeeplinkAction(plain)
	return nil
}

type DocumentRow struct {
	// Action corresponds to the JSON schema field "action".
	Action DocumentRowAction `json:"action" yaml:"action" mapstructure:"action"`

	// Detail corresponds to the JSON schema field "detail".
	Detail string `json:"detail" yaml:"detail" mapstructure:"detail"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// PostboxType corresponds to the JSON schema field "postboxType".
	PostboxType DocumentRowPostboxType `json:"postboxType" yaml:"postboxType" mapstructure:"postboxType"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

type DocumentRowAction struct {
	// Payload corresponds to the JSON schema field "payload".
	Payload string `json:"payload" yaml:"payload" mapstructure:"payload"`

	// Type corresponds to the JSON schema field "type".
	Type DocumentRowActionType `json:"type" yaml:"type" mapstructure:"type"`
}

type DocumentRowActionType string

const DocumentRowActionTypeBrowserModal DocumentRowActionType = "browserModal"

var enumValues_DocumentRowActionType = []interface{}{
	"browserModal",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentRowActionType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentRowActionType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentRowActionType, v)
	}
	*j = DocumentRowActionType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentRowAction) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["payload"]; raw != nil && !ok {
		return fmt.Errorf("field payload in DocumentRowAction: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in DocumentRowAction: required")
	}
	type Plain DocumentRowAction
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if matched, _ := regexp.MatchString(`^https://.*\.pdf\?.*$`, string(plain.Payload)); !matched {
		return fmt.Errorf("field %s pattern match: must match %s", "Payload", `^https://.*\.pdf\?.*$`)
	}
	*j = DocumentRowAction(plain)
	return nil
}

type DocumentRowPostboxType string

const DocumentRowPostboxTypeCAINCOMEINVOICE DocumentRowPostboxType = "CA_INCOME_INVOICE"
const DocumentRowPostboxTypeCOSTSINFOSELLV2 DocumentRowPostboxType = "COSTS_INFO_SELL_V2"
const DocumentRowPostboxTypeCRYPTOSECURITIESSETTLEMENT DocumentRowPostboxType = "CRYPTO_SECURITIES_SETTLEMENT"

var enumValues_DocumentRowPostboxType = []interface{}{
	"CA_INCOME_INVOICE",
	"CRYPTO_SECURITIES_SETTLEMENT",
	"COSTS_INFO_SELL_V2",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentRowPostboxType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentRowPostboxType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentRowPostboxType, v)
	}
	*j = DocumentRowPostboxType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentRow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["action"]; raw != nil && !ok {
		return fmt.Errorf("field action in DocumentRow: required")
	}
	if _, ok := raw["detail"]; raw != nil && !ok {
		return fmt.Errorf("field detail in DocumentRow: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in DocumentRow: required")
	}
	if _, ok := raw["postboxType"]; raw != nil && !ok {
		return fmt.Errorf("field postboxType in DocumentRow: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in DocumentRow: required")
	}
	type Plain DocumentRow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if matched, _ := regexp.MatchString(`^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$`, string(plain.Detail)); !matched {
		return fmt.Errorf("field %s pattern match: must match %s", "Detail", `^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$`)
	}
	if matched, _ := regexp.MatchString(`^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`, string(plain.Id)); !matched {
		return fmt.Errorf("field %s pattern match: must match %s", "Id", `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`)
	}
	*j = DocumentRow(plain)
	return nil
}

type DocumentSection struct {
	// Data corresponds to the JSON schema field "data".
	Data []DocumentRow `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Title corresponds to the JSON schema field "title".
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentSection) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in DocumentSection: required")
	}
	type Plain DocumentSection
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = DocumentSection(plain)
	return nil
}

type HeaderData struct {
	// Icon corresponds to the JSON schema field "icon".
	Icon string `json:"icon" yaml:"icon" mapstructure:"icon"`

	// Status corresponds to the JSON schema field "status".
	Status HeaderDataStatus `json:"status" yaml:"status" mapstructure:"status"`

	// SubtitleText corresponds to the JSON schema field "subtitleText".
	SubtitleText *string `json:"subtitleText,omitempty" yaml:"subtitleText,omitempty" mapstructure:"subtitleText,omitempty"`

	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp time.Time `json:"timestamp" yaml:"timestamp" mapstructure:"timestamp"`
}

type HeaderDataStatus string

const HeaderDataStatusCanceled HeaderDataStatus = "canceled"
const HeaderDataStatusExecuted HeaderDataStatus = "executed"

var enumValues_HeaderDataStatus = []interface{}{
	"executed",
	"canceled",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *HeaderDataStatus) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_HeaderDataStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_HeaderDataStatus, v)
	}
	*j = HeaderDataStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *HeaderData) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["icon"]; raw != nil && !ok {
		return fmt.Errorf("field icon in HeaderData: required")
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in HeaderData: required")
	}
	if _, ok := raw["timestamp"]; raw != nil && !ok {
		return fmt.Errorf("field timestamp in HeaderData: required")
	}
	type Plain HeaderData
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if matched, _ := regexp.MatchString(`^logos/([A-Z0-9]+|timeline_interest_new|merchant-[a-f0-9-]+|XF[0-9A-Z]+)/v2$`, string(plain.Icon)); !matched {
		return fmt.Errorf("field %s pattern match: must match %s", "Icon", `^logos/([A-Z0-9]+|timeline_interest_new|merchant-[a-f0-9-]+|XF[0-9A-Z]+)/v2$`)
	}
	*j = HeaderData(plain)
	return nil
}

type HeaderSection struct {
	// Action corresponds to the JSON schema field "action".
	Action *HeaderSectionAction `json:"action,omitempty" yaml:"action,omitempty" mapstructure:"action,omitempty"`

	// Data corresponds to the JSON schema field "data".
	Data HeaderSectionData `json:"data" yaml:"data" mapstructure:"data"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type HeaderSectionAction struct {
	// Payload corresponds to the JSON schema field "payload".
	Payload string `json:"payload" yaml:"payload" mapstructure:"payload"`

	// Type corresponds to the JSON schema field "type".
	Type HeaderSectionActionType `json:"type" yaml:"type" mapstructure:"type"`
}

type HeaderSectionActionType string

const HeaderSectionActionTypeInstrumentDetail HeaderSectionActionType = "instrumentDetail"

var enumValues_HeaderSectionActionType = []interface{}{
	"instrumentDetail",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *HeaderSectionActionType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_HeaderSectionActionType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_HeaderSectionActionType, v)
	}
	*j = HeaderSectionActionType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *HeaderSectionAction) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["payload"]; raw != nil && !ok {
		return fmt.Errorf("field payload in HeaderSectionAction: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in HeaderSectionAction: required")
	}
	type Plain HeaderSectionAction
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = HeaderSectionAction(plain)
	return nil
}

type HeaderSectionData struct {
	// Icon corresponds to the JSON schema field "icon".
	Icon string `json:"icon" yaml:"icon" mapstructure:"icon"`

	// Status corresponds to the JSON schema field "status".
	Status HeaderSectionDataStatus `json:"status" yaml:"status" mapstructure:"status"`

	// SubtitleText corresponds to the JSON schema field "subtitleText".
	SubtitleText *string `json:"subtitleText,omitempty" yaml:"subtitleText,omitempty" mapstructure:"subtitleText,omitempty"`

	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp string `json:"timestamp" yaml:"timestamp" mapstructure:"timestamp"`
}

type HeaderSectionDataStatus string

const HeaderSectionDataStatusCanceled HeaderSectionDataStatus = "canceled"
const HeaderSectionDataStatusExecuted HeaderSectionDataStatus = "executed"

var enumValues_HeaderSectionDataStatus = []interface{}{
	"executed",
	"canceled",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *HeaderSectionDataStatus) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_HeaderSectionDataStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_HeaderSectionDataStatus, v)
	}
	*j = HeaderSectionDataStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *HeaderSectionData) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["icon"]; raw != nil && !ok {
		return fmt.Errorf("field icon in HeaderSectionData: required")
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in HeaderSectionData: required")
	}
	if _, ok := raw["timestamp"]; raw != nil && !ok {
		return fmt.Errorf("field timestamp in HeaderSectionData: required")
	}
	type Plain HeaderSectionData
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = HeaderSectionData(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *HeaderSection) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in HeaderSection: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in HeaderSection: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in HeaderSection: required")
	}
	type Plain HeaderSection
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = HeaderSection(plain)
	return nil
}

type InterestRow struct {
	// Detail corresponds to the JSON schema field "detail".
	Detail InterestRowDetail `json:"detail" yaml:"detail" mapstructure:"detail"`

	// Style corresponds to the JSON schema field "style".
	Style InterestRowStyle `json:"style" yaml:"style" mapstructure:"style"`

	// Title corresponds to the JSON schema field "title".
	Title InterestRowTitle `json:"title" yaml:"title" mapstructure:"title"`
}

type InterestRowDetail struct {
	// FunctionalStyle corresponds to the JSON schema field "functionalStyle".
	FunctionalStyle *InterestRowDetailFunctionalStyle `json:"functionalStyle,omitempty" yaml:"functionalStyle,omitempty" mapstructure:"functionalStyle,omitempty"`

	// Text corresponds to the JSON schema field "text".
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type InterestRowDetailType `json:"type" yaml:"type" mapstructure:"type"`
}

type InterestRowDetailFunctionalStyle string

const InterestRowDetailFunctionalStyleEXECUTED InterestRowDetailFunctionalStyle = "EXECUTED"

var enumValues_InterestRowDetailFunctionalStyle = []interface{}{
	"EXECUTED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InterestRowDetailFunctionalStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_InterestRowDetailFunctionalStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_InterestRowDetailFunctionalStyle, v)
	}
	*j = InterestRowDetailFunctionalStyle(v)
	return nil
}

type InterestRowDetailType string

const InterestRowDetailTypeStatus InterestRowDetailType = "status"
const InterestRowDetailTypeText InterestRowDetailType = "text"

var enumValues_InterestRowDetailType = []interface{}{
	"status",
	"text",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InterestRowDetailType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_InterestRowDetailType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_InterestRowDetailType, v)
	}
	*j = InterestRowDetailType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InterestRowDetail) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in InterestRowDetail: required")
	}
	type Plain InterestRowDetail
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = InterestRowDetail(plain)
	return nil
}

type InterestRowStyle string

const InterestRowStylePlain InterestRowStyle = "plain"

var enumValues_InterestRowStyle = []interface{}{
	"plain",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InterestRowStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_InterestRowStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_InterestRowStyle, v)
	}
	*j = InterestRowStyle(v)
	return nil
}

type InterestRowTitle string

const InterestRowTitleAngesammelt InterestRowTitle = "Angesammelt"
const InterestRowTitleAsset InterestRowTitle = "Asset"
const InterestRowTitleDurchschnittssaldo InterestRowTitle = "Durchschnittssaldo"
const InterestRowTitleGesamt InterestRowTitle = "Gesamt"
const InterestRowTitleJährlicheRate InterestRowTitle = "Jährliche Rate"
const InterestRowTitleStatus InterestRowTitle = "Status"
const InterestRowTitleSteuern InterestRowTitle = "Steuern"

var enumValues_InterestRowTitle = []interface{}{
	"Status",
	"Durchschnittssaldo",
	"Jährliche Rate",
	"Asset",
	"Angesammelt",
	"Steuern",
	"Gesamt",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InterestRowTitle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_InterestRowTitle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_InterestRowTitle, v)
	}
	*j = InterestRowTitle(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InterestRow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["detail"]; raw != nil && !ok {
		return fmt.Errorf("field detail in InterestRow: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in InterestRow: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in InterestRow: required")
	}
	type Plain InterestRow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = InterestRow(plain)
	return nil
}

type NoteSection struct {
	// Content corresponds to the JSON schema field "content".
	Content *string `json:"content,omitempty" yaml:"content,omitempty" mapstructure:"content,omitempty"`

	// Title corresponds to the JSON schema field "title".
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NoteSection) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in NoteSection: required")
	}
	type Plain NoteSection
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = NoteSection(plain)
	return nil
}

type PaymentRow struct {
	// Detail corresponds to the JSON schema field "detail".
	Detail PaymentRowDetail `json:"detail" yaml:"detail" mapstructure:"detail"`

	// Style corresponds to the JSON schema field "style".
	Style string `json:"style" yaml:"style" mapstructure:"style"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

type PaymentRowDetail struct {
	// DisplayValue corresponds to the JSON schema field "displayValue".
	DisplayValue *PaymentRowDetailDisplayValue `json:"displayValue,omitempty" yaml:"displayValue,omitempty" mapstructure:"displayValue,omitempty"`

	// FunctionalStyle corresponds to the JSON schema field "functionalStyle".
	FunctionalStyle *string `json:"functionalStyle,omitempty" yaml:"functionalStyle,omitempty" mapstructure:"functionalStyle,omitempty"`

	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type PaymentRowDetailDisplayValue struct {
	// Prefix corresponds to the JSON schema field "prefix".
	Prefix *string `json:"prefix,omitempty" yaml:"prefix,omitempty" mapstructure:"prefix,omitempty"`

	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentRowDetailDisplayValue) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["text"]; raw != nil && !ok {
		return fmt.Errorf("field text in PaymentRowDetailDisplayValue: required")
	}
	type Plain PaymentRowDetailDisplayValue
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = PaymentRowDetailDisplayValue(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentRowDetail) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["text"]; raw != nil && !ok {
		return fmt.Errorf("field text in PaymentRowDetail: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in PaymentRowDetail: required")
	}
	type Plain PaymentRowDetail
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = PaymentRowDetail(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentRow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["detail"]; raw != nil && !ok {
		return fmt.Errorf("field detail in PaymentRow: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in PaymentRow: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in PaymentRow: required")
	}
	type Plain PaymentRow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = PaymentRow(plain)
	return nil
}

type StatusRow struct {
	// Detail corresponds to the JSON schema field "detail".
	Detail StatusRowDetail `json:"detail" yaml:"detail" mapstructure:"detail"`

	// Style corresponds to the JSON schema field "style".
	Style StatusRowStyle `json:"style" yaml:"style" mapstructure:"style"`

	// Title corresponds to the JSON schema field "title".
	Title StatusRowTitle `json:"title" yaml:"title" mapstructure:"title"`
}

type StatusRowDetail struct {
	// DisplayValue corresponds to the JSON schema field "displayValue".
	DisplayValue *StatusRowDetailDisplayValue `json:"displayValue,omitempty" yaml:"displayValue,omitempty" mapstructure:"displayValue,omitempty"`

	// FunctionalStyle corresponds to the JSON schema field "functionalStyle".
	FunctionalStyle *StatusRowDetailFunctionalStyle `json:"functionalStyle,omitempty" yaml:"functionalStyle,omitempty" mapstructure:"functionalStyle,omitempty"`

	// Text corresponds to the JSON schema field "text".
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type StatusRowDetailType `json:"type" yaml:"type" mapstructure:"type"`
}

type StatusRowDetailDisplayValue struct {
	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusRowDetailDisplayValue) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["text"]; raw != nil && !ok {
		return fmt.Errorf("field text in StatusRowDetailDisplayValue: required")
	}
	type Plain StatusRowDetailDisplayValue
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = StatusRowDetailDisplayValue(plain)
	return nil
}

type StatusRowDetailFunctionalStyle string

const StatusRowDetailFunctionalStyleCANCELED StatusRowDetailFunctionalStyle = "CANCELED"
const StatusRowDetailFunctionalStyleEXECUTED StatusRowDetailFunctionalStyle = "EXECUTED"

var enumValues_StatusRowDetailFunctionalStyle = []interface{}{
	"EXECUTED",
	"CANCELED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusRowDetailFunctionalStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatusRowDetailFunctionalStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatusRowDetailFunctionalStyle, v)
	}
	*j = StatusRowDetailFunctionalStyle(v)
	return nil
}

type StatusRowDetailType string

const StatusRowDetailTypeStatus StatusRowDetailType = "status"
const StatusRowDetailTypeText StatusRowDetailType = "text"

var enumValues_StatusRowDetailType = []interface{}{
	"status",
	"text",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusRowDetailType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatusRowDetailType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatusRowDetailType, v)
	}
	*j = StatusRowDetailType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusRowDetail) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in StatusRowDetail: required")
	}
	type Plain StatusRowDetail
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = StatusRowDetail(plain)
	return nil
}

type StatusRowStyle string

const StatusRowStylePlain StatusRowStyle = "plain"

var enumValues_StatusRowStyle = []interface{}{
	"plain",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusRowStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatusRowStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatusRowStyle, v)
	}
	*j = StatusRowStyle(v)
	return nil
}

type StatusRowTitle string

const StatusRowTitleEvent StatusRowTitle = "Event"
const StatusRowTitleStatus StatusRowTitle = "Status"
const StatusRowTitleWertpapier StatusRowTitle = "Wertpapier"

var enumValues_StatusRowTitle = []interface{}{
	"Status",
	"Event",
	"Wertpapier",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusRowTitle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatusRowTitle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatusRowTitle, v)
	}
	*j = StatusRowTitle(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusRow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["detail"]; raw != nil && !ok {
		return fmt.Errorf("field detail in StatusRow: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in StatusRow: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in StatusRow: required")
	}
	type Plain StatusRow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = StatusRow(plain)
	return nil
}

type StepItem struct {
	// Content corresponds to the JSON schema field "content".
	Content StepItemContent `json:"content" yaml:"content" mapstructure:"content"`

	// Leading corresponds to the JSON schema field "leading".
	Leading StepItemLeading `json:"leading" yaml:"leading" mapstructure:"leading"`
}

type StepItemContent struct {
	// Cta corresponds to the JSON schema field "cta".
	Cta *map[string]interface{} `json:"cta,omitempty" yaml:"cta,omitempty" mapstructure:"cta,omitempty"`

	// Subtitle corresponds to the JSON schema field "subtitle".
	Subtitle *string `json:"subtitle,omitempty" yaml:"subtitle,omitempty" mapstructure:"subtitle,omitempty"`

	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp time.Time `json:"timestamp" yaml:"timestamp" mapstructure:"timestamp"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StepItemContent) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["timestamp"]; raw != nil && !ok {
		return fmt.Errorf("field timestamp in StepItemContent: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in StepItemContent: required")
	}
	type Plain StepItemContent
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = StepItemContent(plain)
	return nil
}

type StepItemLeading struct {
	// Avatar corresponds to the JSON schema field "avatar".
	Avatar StepItemLeadingAvatar `json:"avatar" yaml:"avatar" mapstructure:"avatar"`

	// Connection corresponds to the JSON schema field "connection".
	Connection StepItemLeadingConnection `json:"connection" yaml:"connection" mapstructure:"connection"`
}

type StepItemLeadingAvatar struct {
	// Status corresponds to the JSON schema field "status".
	Status StepItemLeadingAvatarStatus `json:"status" yaml:"status" mapstructure:"status"`

	// Type corresponds to the JSON schema field "type".
	Type StepItemLeadingAvatarType `json:"type" yaml:"type" mapstructure:"type"`
}

type StepItemLeadingAvatarStatus string

const StepItemLeadingAvatarStatusCompleted StepItemLeadingAvatarStatus = "completed"

var enumValues_StepItemLeadingAvatarStatus = []interface{}{
	"completed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StepItemLeadingAvatarStatus) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StepItemLeadingAvatarStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StepItemLeadingAvatarStatus, v)
	}
	*j = StepItemLeadingAvatarStatus(v)
	return nil
}

type StepItemLeadingAvatarType string

const StepItemLeadingAvatarTypeBullet StepItemLeadingAvatarType = "bullet"

var enumValues_StepItemLeadingAvatarType = []interface{}{
	"bullet",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StepItemLeadingAvatarType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StepItemLeadingAvatarType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StepItemLeadingAvatarType, v)
	}
	*j = StepItemLeadingAvatarType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StepItemLeadingAvatar) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in StepItemLeadingAvatar: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in StepItemLeadingAvatar: required")
	}
	type Plain StepItemLeadingAvatar
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = StepItemLeadingAvatar(plain)
	return nil
}

type StepItemLeadingConnection struct {
	// Order corresponds to the JSON schema field "order".
	Order StepItemLeadingConnectionOrder `json:"order" yaml:"order" mapstructure:"order"`
}

type StepItemLeadingConnectionOrder string

const StepItemLeadingConnectionOrderFirst StepItemLeadingConnectionOrder = "first"
const StepItemLeadingConnectionOrderLast StepItemLeadingConnectionOrder = "last"

var enumValues_StepItemLeadingConnectionOrder = []interface{}{
	"first",
	"last",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StepItemLeadingConnectionOrder) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StepItemLeadingConnectionOrder {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StepItemLeadingConnectionOrder, v)
	}
	*j = StepItemLeadingConnectionOrder(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StepItemLeadingConnection) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["order"]; raw != nil && !ok {
		return fmt.Errorf("field order in StepItemLeadingConnection: required")
	}
	type Plain StepItemLeadingConnection
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = StepItemLeadingConnection(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StepItemLeading) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["avatar"]; raw != nil && !ok {
		return fmt.Errorf("field avatar in StepItemLeading: required")
	}
	if _, ok := raw["connection"]; raw != nil && !ok {
		return fmt.Errorf("field connection in StepItemLeading: required")
	}
	type Plain StepItemLeading
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = StepItemLeading(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StepItem) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["content"]; raw != nil && !ok {
		return fmt.Errorf("field content in StepItem: required")
	}
	if _, ok := raw["leading"]; raw != nil && !ok {
		return fmt.Errorf("field leading in StepItem: required")
	}
	type Plain StepItem
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = StepItem(plain)
	return nil
}

type StepsSection struct {
	// Steps corresponds to the JSON schema field "steps".
	Steps []StepItem `json:"steps" yaml:"steps" mapstructure:"steps"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StepsSection) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["steps"]; raw != nil && !ok {
		return fmt.Errorf("field steps in StepsSection: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in StepsSection: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in StepsSection: required")
	}
	type Plain StepsSection
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = StepsSection(plain)
	return nil
}

type SupportRow struct {
	// Detail corresponds to the JSON schema field "detail".
	Detail SupportRowDetail `json:"detail" yaml:"detail" mapstructure:"detail"`

	// Style corresponds to the JSON schema field "style".
	Style SupportRowStyle `json:"style" yaml:"style" mapstructure:"style"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

type SupportRowDetail struct {
	// Action corresponds to the JSON schema field "action".
	Action SupportRowDetailAction `json:"action" yaml:"action" mapstructure:"action"`

	// Icon corresponds to the JSON schema field "icon".
	Icon *string `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`
}

type SupportRowDetailAction struct {
	// Payload corresponds to the JSON schema field "payload".
	Payload SupportRowDetailActionPayload `json:"payload" yaml:"payload" mapstructure:"payload"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type SupportRowDetailActionPayload struct {
	// ContextCategory corresponds to the JSON schema field "contextCategory".
	ContextCategory string `json:"contextCategory" yaml:"contextCategory" mapstructure:"contextCategory"`

	// ContextParams corresponds to the JSON schema field "contextParams".
	ContextParams SupportRowDetailActionPayloadContextParams `json:"contextParams" yaml:"contextParams" mapstructure:"contextParams"`
}

type SupportRowDetailActionPayloadContextParams struct {
	// ChatFlowKey corresponds to the JSON schema field "chat_flow_key".
	ChatFlowKey string `json:"chat_flow_key" yaml:"chat_flow_key" mapstructure:"chat_flow_key"`

	// PrimId corresponds to the JSON schema field "primId".
	PrimId *string `json:"primId,omitempty" yaml:"primId,omitempty" mapstructure:"primId,omitempty"`

	// TimelineEventId corresponds to the JSON schema field "timelineEventId".
	TimelineEventId string `json:"timelineEventId" yaml:"timelineEventId" mapstructure:"timelineEventId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SupportRowDetailActionPayloadContextParams) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["chat_flow_key"]; raw != nil && !ok {
		return fmt.Errorf("field chat_flow_key in SupportRowDetailActionPayloadContextParams: required")
	}
	if _, ok := raw["timelineEventId"]; raw != nil && !ok {
		return fmt.Errorf("field timelineEventId in SupportRowDetailActionPayloadContextParams: required")
	}
	type Plain SupportRowDetailActionPayloadContextParams
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if plain.PrimId != nil {
		if matched, _ := regexp.MatchString(`^C[0-9]+$`, string(*plain.PrimId)); !matched {
			return fmt.Errorf("field %s pattern match: must match %s", "PrimId", `^C[0-9]+$`)
		}
	}
	if matched, _ := regexp.MatchString(`^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`, string(plain.TimelineEventId)); !matched {
		return fmt.Errorf("field %s pattern match: must match %s", "TimelineEventId", `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`)
	}
	*j = SupportRowDetailActionPayloadContextParams(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SupportRowDetailActionPayload) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["contextCategory"]; raw != nil && !ok {
		return fmt.Errorf("field contextCategory in SupportRowDetailActionPayload: required")
	}
	if _, ok := raw["contextParams"]; raw != nil && !ok {
		return fmt.Errorf("field contextParams in SupportRowDetailActionPayload: required")
	}
	type Plain SupportRowDetailActionPayload
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SupportRowDetailActionPayload(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SupportRowDetailAction) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["payload"]; raw != nil && !ok {
		return fmt.Errorf("field payload in SupportRowDetailAction: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in SupportRowDetailAction: required")
	}
	type Plain SupportRowDetailAction
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SupportRowDetailAction(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SupportRowDetail) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["action"]; raw != nil && !ok {
		return fmt.Errorf("field action in SupportRowDetail: required")
	}
	type Plain SupportRowDetail
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SupportRowDetail(plain)
	return nil
}

type SupportRowStyle string

const SupportRowStyleHighlighted SupportRowStyle = "highlighted"

var enumValues_SupportRowStyle = []interface{}{
	"highlighted",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SupportRowStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SupportRowStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SupportRowStyle, v)
	}
	*j = SupportRowStyle(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SupportRow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["detail"]; raw != nil && !ok {
		return fmt.Errorf("field detail in SupportRow: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in SupportRow: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in SupportRow: required")
	}
	type Plain SupportRow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SupportRow(plain)
	return nil
}

type TableSection struct {
	// Data corresponds to the JSON schema field "data".
	Data []interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Title corresponds to the JSON schema field "title".
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TableSection) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in TableSection: required")
	}
	type Plain TableSection
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TableSection(plain)
	return nil
}

type TimelineDetailsJson struct {
	// Id corresponds to the JSON schema field "id".
	Id Uuid `json:"id" yaml:"id" mapstructure:"id"`

	// Sections corresponds to the JSON schema field "sections".
	Sections []interface{} `json:"sections" yaml:"sections" mapstructure:"sections"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TimelineDetailsJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in TimelineDetailsJson: required")
	}
	if _, ok := raw["sections"]; raw != nil && !ok {
		return fmt.Errorf("field sections in TimelineDetailsJson: required")
	}
	type Plain TimelineDetailsJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TimelineDetailsJson(plain)
	return nil
}
