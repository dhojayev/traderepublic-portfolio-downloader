// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package traderepublic

import "encoding/json"

type WebsocketConnectRequestSchemaJson struct {
	// ClientId corresponds to the JSON schema field "clientId".
	ClientId string `json:"clientId" yaml:"clientId" mapstructure:"clientId"`

	// ClientVersion corresponds to the JSON schema field "clientVersion".
	ClientVersion string `json:"clientVersion" yaml:"clientVersion" mapstructure:"clientVersion"`

	// Locale corresponds to the JSON schema field "locale".
	Locale string `json:"locale" yaml:"locale" mapstructure:"locale"`

	// PlatformId corresponds to the JSON schema field "platformId".
	PlatformId string `json:"platformId" yaml:"platformId" mapstructure:"platformId"`

	// PlatformVersion corresponds to the JSON schema field "platformVersion".
	PlatformVersion string `json:"platformVersion" yaml:"platformVersion" mapstructure:"platformVersion"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsocketConnectRequestSchemaJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain WebsocketConnectRequestSchemaJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["clientId"]; !ok || v == nil {
		plain.ClientId = "app.traderepublic.com"
	}
	if v, ok := raw["clientVersion"]; !ok || v == nil {
		plain.ClientVersion = "11.4.1"
	}
	if v, ok := raw["locale"]; !ok || v == nil {
		plain.Locale = "de"
	}
	if v, ok := raw["platformId"]; !ok || v == nil {
		plain.PlatformId = "webtrading"
	}
	if v, ok := raw["platformVersion"]; !ok || v == nil {
		plain.PlatformVersion = "chrome - 140.0.0"
	}
	*j = WebsocketConnectRequestSchemaJson(plain)
	return nil
}
