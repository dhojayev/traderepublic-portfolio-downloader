// Code generated by MockGen. DO NOT EDIT.
// Source: publisher.go
//
// Generated by this command:
//
//	mockgen -source=publisher.go -destination publisher_mock_gen.go -package=traderepublic
//

// Package traderepublic is a generated GoMock package.
package traderepublic

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPublisherInterface is a mock of PublisherInterface interface.
type MockPublisherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherInterfaceMockRecorder
	isgomock struct{}
}

// MockPublisherInterfaceMockRecorder is the mock recorder for MockPublisherInterface.
type MockPublisherInterfaceMockRecorder struct {
	mock *MockPublisherInterface
}

// NewMockPublisherInterface creates a new mock instance.
func NewMockPublisherInterface(ctrl *gomock.Controller) *MockPublisherInterface {
	mock := &MockPublisherInterface{ctrl: ctrl}
	mock.recorder = &MockPublisherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisherInterface) EXPECT() *MockPublisherInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPublisherInterface) Close(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", topic)
}

// Close indicates an expected call of Close.
func (mr *MockPublisherInterfaceMockRecorder) Close(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPublisherInterface)(nil).Close), topic)
}

// Publish mocks base method.
func (m *MockPublisherInterface) Publish(msg []byte, topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", msg, topic)
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherInterfaceMockRecorder) Publish(msg, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisherInterface)(nil).Publish), msg, topic)
}

// Subscribe mocks base method.
func (m *MockPublisherInterface) Subscribe(topic string) <-chan []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic)
	ret0, _ := ret[0].(<-chan []byte)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPublisherInterfaceMockRecorder) Subscribe(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPublisherInterface)(nil).Subscribe), topic)
}
