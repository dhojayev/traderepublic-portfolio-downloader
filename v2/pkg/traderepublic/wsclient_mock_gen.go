// Code generated by MockGen. DO NOT EDIT.
// Source: wsclient.go
//
// Generated by this command:
//
//	mockgen -source=wsclient.go -destination wsclient_mock_gen.go -package=traderepublic
//

// Package traderepublic is a generated GoMock package.
package traderepublic

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWSClientInterface is a mock of WSClientInterface interface.
type MockWSClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWSClientInterfaceMockRecorder
	isgomock struct{}
}

// MockWSClientInterfaceMockRecorder is the mock recorder for MockWSClientInterface.
type MockWSClientInterfaceMockRecorder struct {
	mock *MockWSClientInterface
}

// NewMockWSClientInterface creates a new mock instance.
func NewMockWSClientInterface(ctrl *gomock.Controller) *MockWSClientInterface {
	mock := &MockWSClientInterface{ctrl: ctrl}
	mock.recorder = &MockWSClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWSClientInterface) EXPECT() *MockWSClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWSClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWSClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWSClientInterface)(nil).Close))
}

// Connect mocks base method.
func (m *MockWSClientInterface) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockWSClientInterfaceMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockWSClientInterface)(nil).Connect))
}

// Subscribe mocks base method.
func (m *MockWSClientInterface) Subscribe(data WsSubRequestJson) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", data)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockWSClientInterfaceMockRecorder) Subscribe(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWSClientInterface)(nil).Subscribe), data)
}
