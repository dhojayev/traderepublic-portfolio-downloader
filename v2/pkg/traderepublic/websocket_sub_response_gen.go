// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package traderepublic

import "encoding/json"
import "fmt"
import "reflect"
import "regexp"

type WebsocketSubRequestSchemaJson struct {
	// After corresponds to the JSON schema field "after".
	After *string `json:"after,omitempty" yaml:"after,omitempty" mapstructure:"after,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Token corresponds to the JSON schema field "token".
	Token string `json:"token" yaml:"token" mapstructure:"token"`

	// Type corresponds to the JSON schema field "type".
	Type WebsocketSubRequestSchemaJsonType `json:"type" yaml:"type" mapstructure:"type"`
}

type WebsocketSubRequestSchemaJsonType string

const WebsocketSubRequestSchemaJsonTypeTimelineDetailV2 WebsocketSubRequestSchemaJsonType = "timelineDetailV2"
const WebsocketSubRequestSchemaJsonTypeTimelineTransactions WebsocketSubRequestSchemaJsonType = "timelineTransactions"

var enumValues_WebsocketSubRequestSchemaJsonType = []interface{}{
	"timelineTransactions",
	"timelineDetailV2",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsocketSubRequestSchemaJsonType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsocketSubRequestSchemaJsonType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsocketSubRequestSchemaJsonType, v)
	}
	*j = WebsocketSubRequestSchemaJsonType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsocketSubRequestSchemaJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["token"]; raw != nil && !ok {
		return fmt.Errorf("field token in WebsocketSubRequestSchemaJson: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in WebsocketSubRequestSchemaJson: required")
	}
	type Plain WebsocketSubRequestSchemaJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if plain.Id != nil {
		if matched, _ := regexp.MatchString(`^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`, string(*plain.Id)); !matched {
			return fmt.Errorf("field %s pattern match: must match %s", "Id", `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`)
		}
	}
	*j = WebsocketSubRequestSchemaJson(plain)
	return nil
}
