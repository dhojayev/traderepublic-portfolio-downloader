// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package traderepublic

import "encoding/json"
import "fmt"
import "reflect"
import "regexp"
import "time"

type ActionRow struct {
	// Detail corresponds to the JSON schema field "detail".
	Detail ActionRowDetail `json:"detail" yaml:"detail" mapstructure:"detail"`

	// Style corresponds to the JSON schema field "style".
	Style ActionRowStyle `json:"style" yaml:"style" mapstructure:"style"`

	// Title corresponds to the JSON schema field "title".
	Title ActionRowTitle `json:"title" yaml:"title" mapstructure:"title"`
}

type ActionRowDetail struct {
	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionRowDetail) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in ActionRowDetail: required")
	}
	type Plain ActionRowDetail
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ActionRowDetail(plain)
	return nil
}

type ActionRowStyle string

const ActionRowStylePlain ActionRowStyle = "plain"

var enumValues_ActionRowStyle = []interface{}{
	"plain",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionRowStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActionRowStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActionRowStyle, v)
	}
	*j = ActionRowStyle(v)
	return nil
}

type ActionRowTitle string

const ActionRowTitleProblemMelden ActionRowTitle = "Problem melden"

var enumValues_ActionRowTitle = []interface{}{
	"Problem melden",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionRowTitle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActionRowTitle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActionRowTitle, v)
	}
	*j = ActionRowTitle(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActionRow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["detail"]; raw != nil && !ok {
		return fmt.Errorf("field detail in ActionRow: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in ActionRow: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in ActionRow: required")
	}
	type Plain ActionRow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ActionRow(plain)
	return nil
}

type BenefitRow struct {
	// Detail corresponds to the JSON schema field "detail".
	Detail BenefitRowDetail `json:"detail" yaml:"detail" mapstructure:"detail"`

	// Style corresponds to the JSON schema field "style".
	Style BenefitRowStyle `json:"style" yaml:"style" mapstructure:"style"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

type BenefitRowDetail struct {
	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp time.Time `json:"timestamp" yaml:"timestamp" mapstructure:"timestamp"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BenefitRowDetail) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["timestamp"]; raw != nil && !ok {
		return fmt.Errorf("field timestamp in BenefitRowDetail: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in BenefitRowDetail: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in BenefitRowDetail: required")
	}
	type Plain BenefitRowDetail
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = BenefitRowDetail(plain)
	return nil
}

type BenefitRowStyle string

const BenefitRowStylePlain BenefitRowStyle = "plain"

var enumValues_BenefitRowStyle = []interface{}{
	"plain",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BenefitRowStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BenefitRowStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BenefitRowStyle, v)
	}
	*j = BenefitRowStyle(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BenefitRow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["detail"]; raw != nil && !ok {
		return fmt.Errorf("field detail in BenefitRow: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in BenefitRow: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in BenefitRow: required")
	}
	type Plain BenefitRow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = BenefitRow(plain)
	return nil
}

type HeaderData struct {
	// Icon corresponds to the JSON schema field "icon".
	Icon string `json:"icon" yaml:"icon" mapstructure:"icon"`

	// Status corresponds to the JSON schema field "status".
	Status HeaderDataStatus `json:"status" yaml:"status" mapstructure:"status"`

	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp time.Time `json:"timestamp" yaml:"timestamp" mapstructure:"timestamp"`
}

type HeaderDataStatus string

const HeaderDataStatusExecuted HeaderDataStatus = "executed"
const HeaderDataStatusFailed HeaderDataStatus = "failed"
const HeaderDataStatusPending HeaderDataStatus = "pending"

var enumValues_HeaderDataStatus = []interface{}{
	"executed",
	"pending",
	"failed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *HeaderDataStatus) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_HeaderDataStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_HeaderDataStatus, v)
	}
	*j = HeaderDataStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *HeaderData) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["icon"]; raw != nil && !ok {
		return fmt.Errorf("field icon in HeaderData: required")
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in HeaderData: required")
	}
	if _, ok := raw["timestamp"]; raw != nil && !ok {
		return fmt.Errorf("field timestamp in HeaderData: required")
	}
	type Plain HeaderData
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if matched, _ := regexp.MatchString(`^(logos/|merchant-logos/)[a-zA-Z0-9-_/]+(/v2)?$`, string(plain.Icon)); !matched {
		return fmt.Errorf("field %s pattern match: must match %s", "Icon", `^(logos/|merchant-logos/)[a-zA-Z0-9-_/]+(/v2)?$`)
	}
	*j = HeaderData(plain)
	return nil
}

type PaymentRow struct {
	// Detail corresponds to the JSON schema field "detail".
	Detail PaymentRowDetail `json:"detail" yaml:"detail" mapstructure:"detail"`

	// Style corresponds to the JSON schema field "style".
	Style PaymentRowStyle `json:"style" yaml:"style" mapstructure:"style"`

	// Title corresponds to the JSON schema field "title".
	Title PaymentRowTitle `json:"title" yaml:"title" mapstructure:"title"`
}

type PaymentRowDetail struct {
	// DisplayValue corresponds to the JSON schema field "displayValue".
	DisplayValue *PaymentRowDetailDisplayValue `json:"displayValue,omitempty" yaml:"displayValue,omitempty" mapstructure:"displayValue,omitempty"`

	// FunctionalStyle corresponds to the JSON schema field "functionalStyle".
	FunctionalStyle *PaymentRowDetailFunctionalStyle `json:"functionalStyle,omitempty" yaml:"functionalStyle,omitempty" mapstructure:"functionalStyle,omitempty"`

	// Icon corresponds to the JSON schema field "icon".
	Icon *string `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`

	// Text corresponds to the JSON schema field "text".
	Text *string `json:"text,omitempty" yaml:"text,omitempty" mapstructure:"text,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type PaymentRowDetailType `json:"type" yaml:"type" mapstructure:"type"`
}

type PaymentRowDetailDisplayValue struct {
	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentRowDetailDisplayValue) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["text"]; raw != nil && !ok {
		return fmt.Errorf("field text in PaymentRowDetailDisplayValue: required")
	}
	type Plain PaymentRowDetailDisplayValue
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = PaymentRowDetailDisplayValue(plain)
	return nil
}

type PaymentRowDetailFunctionalStyle string

const PaymentRowDetailFunctionalStyleEXECUTED PaymentRowDetailFunctionalStyle = "EXECUTED"

var enumValues_PaymentRowDetailFunctionalStyle = []interface{}{
	"EXECUTED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentRowDetailFunctionalStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentRowDetailFunctionalStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentRowDetailFunctionalStyle, v)
	}
	*j = PaymentRowDetailFunctionalStyle(v)
	return nil
}

type PaymentRowDetailType string

const PaymentRowDetailTypeIconWithText PaymentRowDetailType = "iconWithText"
const PaymentRowDetailTypeStatus PaymentRowDetailType = "status"
const PaymentRowDetailTypeText PaymentRowDetailType = "text"

var enumValues_PaymentRowDetailType = []interface{}{
	"status",
	"text",
	"iconWithText",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentRowDetailType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentRowDetailType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentRowDetailType, v)
	}
	*j = PaymentRowDetailType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentRowDetail) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in PaymentRowDetail: required")
	}
	type Plain PaymentRowDetail
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if plain.Icon != nil {
		if matched, _ := regexp.MatchString(`^logos/[a-zA-Z0-9-_/]+/v2$`, string(*plain.Icon)); !matched {
			return fmt.Errorf("field %s pattern match: must match %s", "Icon", `^logos/[a-zA-Z0-9-_/]+/v2$`)
		}
	}
	*j = PaymentRowDetail(plain)
	return nil
}

type PaymentRowStyle string

const PaymentRowStylePlain PaymentRowStyle = "plain"

var enumValues_PaymentRowStyle = []interface{}{
	"plain",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentRowStyle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentRowStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentRowStyle, v)
	}
	*j = PaymentRowStyle(v)
	return nil
}

type PaymentRowTitle string

const PaymentRowTitleBetrag PaymentRowTitle = "Betrag"
const PaymentRowTitleGesamt PaymentRowTitle = "Gesamt"
const PaymentRowTitleHändler PaymentRowTitle = "Händler"
const PaymentRowTitleKartenerstattung PaymentRowTitle = "Kartenerstattung"
const PaymentRowTitleKartenzahlung PaymentRowTitle = "Kartenzahlung"
const PaymentRowTitleWechselkurs PaymentRowTitle = "Wechselkurs"
const PaymentRowTitleZahlung PaymentRowTitle = "Zahlung"

var enumValues_PaymentRowTitle = []interface{}{
	"Kartenzahlung",
	"Kartenerstattung",
	"Zahlung",
	"Händler",
	"Betrag",
	"Wechselkurs",
	"Gesamt",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentRowTitle) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentRowTitle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentRowTitle, v)
	}
	*j = PaymentRowTitle(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentRow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["detail"]; raw != nil && !ok {
		return fmt.Errorf("field detail in PaymentRow: required")
	}
	if _, ok := raw["style"]; raw != nil && !ok {
		return fmt.Errorf("field style in PaymentRow: required")
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in PaymentRow: required")
	}
	type Plain PaymentRow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = PaymentRow(plain)
	return nil
}

type Section struct {
	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Title corresponds to the JSON schema field "title".
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type SectionType `json:"type" yaml:"type" mapstructure:"type"`
}

type SectionType string

const SectionTypeHeader SectionType = "header"
const SectionTypeTable SectionType = "table"

var enumValues_SectionType = []interface{}{
	"header",
	"table",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SectionType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SectionType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SectionType, v)
	}
	*j = SectionType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Section) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in Section: required")
	}
	type Plain Section
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = Section(plain)
	return nil
}

type TimelineDetailSchemaJson struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Sections corresponds to the JSON schema field "sections".
	Sections []Section `json:"sections" yaml:"sections" mapstructure:"sections"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TimelineDetailSchemaJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in TimelineDetailSchemaJson: required")
	}
	if _, ok := raw["sections"]; raw != nil && !ok {
		return fmt.Errorf("field sections in TimelineDetailSchemaJson: required")
	}
	type Plain TimelineDetailSchemaJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if matched, _ := regexp.MatchString(`^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`, string(plain.Id)); !matched {
		return fmt.Errorf("field %s pattern match: must match %s", "Id", `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`)
	}
	*j = TimelineDetailSchemaJson(plain)
	return nil
}
