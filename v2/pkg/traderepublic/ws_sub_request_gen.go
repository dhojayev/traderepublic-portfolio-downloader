// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package traderepublic

import "encoding/json"
import "fmt"
import "reflect"

type WsSubRequestJson struct {
	// After corresponds to the JSON schema field "after".
	After *string `json:"after,omitempty" yaml:"after,omitempty" mapstructure:"after,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jurisdiction corresponds to the JSON schema field "jurisdiction".
	Jurisdiction *WsSubRequestJsonJurisdiction `json:"jurisdiction,omitempty" yaml:"jurisdiction,omitempty" mapstructure:"jurisdiction,omitempty"`

	// Token corresponds to the JSON schema field "token".
	Token string `json:"token" yaml:"token" mapstructure:"token"`

	// Type corresponds to the JSON schema field "type".
	Type WsSubRequestJsonType `json:"type" yaml:"type" mapstructure:"type"`
}

type WsSubRequestJsonJurisdiction string

const WsSubRequestJsonJurisdictionDE WsSubRequestJsonJurisdiction = "DE"

var enumValues_WsSubRequestJsonJurisdiction = []interface{}{
	"DE",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WsSubRequestJsonJurisdiction) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WsSubRequestJsonJurisdiction {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WsSubRequestJsonJurisdiction, v)
	}
	*j = WsSubRequestJsonJurisdiction(v)
	return nil
}

type WsSubRequestJsonType string

const WsSubRequestJsonTypeInstrument WsSubRequestJsonType = "instrument"
const WsSubRequestJsonTypeTimelineDetailV2 WsSubRequestJsonType = "timelineDetailV2"
const WsSubRequestJsonTypeTimelineTransactions WsSubRequestJsonType = "timelineTransactions"

var enumValues_WsSubRequestJsonType = []interface{}{
	"timelineTransactions",
	"timelineDetailV2",
	"instrument",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WsSubRequestJsonType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WsSubRequestJsonType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WsSubRequestJsonType, v)
	}
	*j = WsSubRequestJsonType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WsSubRequestJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["token"]; raw != nil && !ok {
		return fmt.Errorf("field token in WsSubRequestJson: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in WsSubRequestJson: required")
	}
	type Plain WsSubRequestJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = WsSubRequestJson(plain)
	return nil
}
