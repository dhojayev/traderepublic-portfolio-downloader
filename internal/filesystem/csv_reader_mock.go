// Code generated by MockGen. DO NOT EDIT.
// Source: csv_reader.go
//
// Generated by this command:
//
//	mockgen -source=csv_reader.go -destination csv_reader_mock.go -package=filesystem
//

// Package filesystem is a generated GoMock package.
package filesystem

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCSVReaderInterface is a mock of CSVReaderInterface interface.
type MockCSVReaderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCSVReaderInterfaceMockRecorder
	isgomock struct{}
}

// MockCSVReaderInterfaceMockRecorder is the mock recorder for MockCSVReaderInterface.
type MockCSVReaderInterfaceMockRecorder struct {
	mock *MockCSVReaderInterface
}

// NewMockCSVReaderInterface creates a new mock instance.
func NewMockCSVReaderInterface(ctrl *gomock.Controller) *MockCSVReaderInterface {
	mock := &MockCSVReaderInterface{ctrl: ctrl}
	mock.recorder = &MockCSVReaderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVReaderInterface) EXPECT() *MockCSVReaderInterfaceMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockCSVReaderInterface) Read(filepath string) ([]CSVEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", filepath)
	ret0, _ := ret[0].([]CSVEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCSVReaderInterfaceMockRecorder) Read(filepath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCSVReaderInterface)(nil).Read), filepath)
}
