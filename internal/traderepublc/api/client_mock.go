// Code generated by MockGen. DO NOT EDIT.
// Source: client_interface.go
//
// Generated by this command:
//
//	mockgen -source=client_interface.go -destination client_mock.go -package=api
//

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"

	restclient "github.com/dhojayev/traderepublic-portfolio-downloader/internal/traderepublc/api/restclient"
	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockClientInterface) Login(requestBody restclient.APILoginRequest, refreshToken Token) (restclient.APILoginResponse, Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", requestBody, refreshToken)
	ret0, _ := ret[0].(restclient.APILoginResponse)
	ret1, _ := ret[1].(Token)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockClientInterfaceMockRecorder) Login(requestBody, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClientInterface)(nil).Login), requestBody, refreshToken)
}

// PostOTP mocks base method.
func (m *MockClientInterface) PostOTP(processID, otp string) (Token, Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostOTP", processID, otp)
	ret0, _ := ret[0].(Token)
	ret1, _ := ret[1].(Token)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostOTP indicates an expected call of PostOTP.
func (mr *MockClientInterfaceMockRecorder) PostOTP(processID, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostOTP", reflect.TypeOf((*MockClientInterface)(nil).PostOTP), processID, otp)
}

// Session mocks base method.
func (m *MockClientInterface) Session(refreshToken Token) (Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", refreshToken)
	ret0, _ := ret[0].(Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Session indicates an expected call of Session.
func (mr *MockClientInterfaceMockRecorder) Session(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockClientInterface)(nil).Session), refreshToken)
}
