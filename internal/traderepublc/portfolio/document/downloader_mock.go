// Code generated by MockGen. DO NOT EDIT.
// Source: downloader.go
//
// Generated by this command:
//
//	mockgen -source=downloader.go -destination downloader_mock.go -package=document
//

// Package document is a generated GoMock package.
package document

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDownloaderInterface is a mock of DownloaderInterface interface.
type MockDownloaderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderInterfaceMockRecorder
}

// MockDownloaderInterfaceMockRecorder is the mock recorder for MockDownloaderInterface.
type MockDownloaderInterfaceMockRecorder struct {
	mock *MockDownloaderInterface
}

// NewMockDownloaderInterface creates a new mock instance.
func NewMockDownloaderInterface(ctrl *gomock.Controller) *MockDownloaderInterface {
	mock := &MockDownloaderInterface{ctrl: ctrl}
	mock.recorder = &MockDownloaderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloaderInterface) EXPECT() *MockDownloaderInterfaceMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockDownloaderInterface) Download(baseDir string, document Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", baseDir, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockDownloaderInterfaceMockRecorder) Download(baseDir, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloaderInterface)(nil).Download), baseDir, document)
}
