// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go
//
// Generated by this command:
//
//	mockgen -source=processor.go -destination processor_mock.go -package=transaction
//

// Package transaction is a generated GoMock package.
package transaction

import (
	reflect "reflect"

	details "github.com/dhojayev/traderepublic-portfolio-downloader/internal/traderepublc/api/timeline/details"
	transactions "github.com/dhojayev/traderepublic-portfolio-downloader/internal/traderepublc/api/timeline/transactions"
	gomock "go.uber.org/mock/gomock"
)

// MockProcessorInterface is a mock of ProcessorInterface interface.
type MockProcessorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorInterfaceMockRecorder
}

// MockProcessorInterfaceMockRecorder is the mock recorder for MockProcessorInterface.
type MockProcessorInterfaceMockRecorder struct {
	mock *MockProcessorInterface
}

// NewMockProcessorInterface creates a new mock instance.
func NewMockProcessorInterface(ctrl *gomock.Controller) *MockProcessorInterface {
	mock := &MockProcessorInterface{ctrl: ctrl}
	mock.recorder = &MockProcessorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessorInterface) EXPECT() *MockProcessorInterfaceMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockProcessorInterface) Process(eventType transactions.EventType, response details.NormalizedResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", eventType, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockProcessorInterfaceMockRecorder) Process(eventType, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcessorInterface)(nil).Process), eventType, response)
}
