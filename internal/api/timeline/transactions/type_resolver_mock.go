// Code generated by MockGen. DO NOT EDIT.
// Source: type.go
//
// Generated by this command:
//
//	mockgen -source=type.go -destination type_resolver_mock.go -package=transactions
//

// Package transactions is a generated GoMock package.
package transactions

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventTypeResolverInterface is a mock of EventTypeResolverInterface interface.
type MockEventTypeResolverInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventTypeResolverInterfaceMockRecorder
}

// MockEventTypeResolverInterfaceMockRecorder is the mock recorder for MockEventTypeResolverInterface.
type MockEventTypeResolverInterfaceMockRecorder struct {
	mock *MockEventTypeResolverInterface
}

// NewMockEventTypeResolverInterface creates a new mock instance.
func NewMockEventTypeResolverInterface(ctrl *gomock.Controller) *MockEventTypeResolverInterface {
	mock := &MockEventTypeResolverInterface{ctrl: ctrl}
	mock.recorder = &MockEventTypeResolverInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventTypeResolverInterface) EXPECT() *MockEventTypeResolverInterfaceMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockEventTypeResolverInterface) Resolve(response ResponseItem) (EventType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", response)
	ret0, _ := ret[0].(EventType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockEventTypeResolverInterfaceMockRecorder) Resolve(response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockEventTypeResolverInterface)(nil).Resolve), response)
}
