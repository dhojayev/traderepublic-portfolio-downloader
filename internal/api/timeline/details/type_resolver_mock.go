// Code generated by MockGen. DO NOT EDIT.
// Source: type.go
//
// Generated by this command:
//
//	mockgen -source=type.go -destination type_resolver_mock.go -package=details
//

// Package details is a generated GoMock package.
package details

import (
	reflect "reflect"

	transactions "github.com/dhojayev/traderepublic-portfolio-downloader/internal/api/timeline/transactions"
	gomock "go.uber.org/mock/gomock"
)

// MockTypeResolverInterface is a mock of TypeResolverInterface interface.
type MockTypeResolverInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTypeResolverInterfaceMockRecorder
}

// MockTypeResolverInterfaceMockRecorder is the mock recorder for MockTypeResolverInterface.
type MockTypeResolverInterfaceMockRecorder struct {
	mock *MockTypeResolverInterface
}

// NewMockTypeResolverInterface creates a new mock instance.
func NewMockTypeResolverInterface(ctrl *gomock.Controller) *MockTypeResolverInterface {
	mock := &MockTypeResolverInterface{ctrl: ctrl}
	mock.recorder = &MockTypeResolverInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeResolverInterface) EXPECT() *MockTypeResolverInterfaceMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockTypeResolverInterface) Resolve(eventType transactions.EventType, response NormalizedResponse) (Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", eventType, response)
	ret0, _ := ret[0].(Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockTypeResolverInterfaceMockRecorder) Resolve(eventType, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockTypeResolverInterface)(nil).Resolve), eventType, response)
}
