// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package activity

import (
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api/auth"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api/timeline/activitylog"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api/timeline/details"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api/websocket"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/console"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/portfolio/document"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/writer"
	"github.com/google/wire"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

func ProvideHandler(responseWriter writer.Interface, logger *logrus.Logger) (Handler, error) {
	client := api.NewClient(logger)
	authClient, err := auth.NewClient(client, logger)
	if err != nil {
		return Handler{}, err
	}
	authService := console.NewAuthService(authClient)
	reader, err := websocket.NewReader(authService, responseWriter, logger)
	if err != nil {
		return Handler{}, err
	}
	activitylogClient := activitylog.NewClient(reader, logger)
	detailsClient := details.NewClient(reader, logger)
	responseNormalizer := details.NewResponseNormalizer(logger)
	dateResolver := document.NewDateResolver(logger)
	modelBuilder := document.NewModelBuilder(dateResolver, logger)
	downloader := document.NewDownloader(logger)
	processor := NewProcessor(modelBuilder, downloader, logger)
	handler := NewHandler(activitylogClient, detailsClient, responseNormalizer, processor, logger)
	return handler, nil
}

// wire.go:

var DefaultSet = wire.NewSet(
	NewProcessor,
	NewHandler, wire.Bind(new(ProcessorInterface), new(Processor)), wire.Bind(new(HandlerInterface), new(Handler)),
)
