// Code generated by MockGen. DO NOT EDIT.
// Source: reader.go
//
// Generated by this command:
//
//	mockgen -source=reader.go -destination reader_mock.go -package=portfolio
//

// Package portfolio is a generated GoMock package.
package portfolio

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReaderInterface is a mock of ReaderInterface interface.
type MockReaderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockReaderInterfaceMockRecorder
}

// MockReaderInterfaceMockRecorder is the mock recorder for MockReaderInterface.
type MockReaderInterfaceMockRecorder struct {
	mock *MockReaderInterface
}

// NewMockReaderInterface creates a new mock instance.
func NewMockReaderInterface(ctrl *gomock.Controller) *MockReaderInterface {
	mock := &MockReaderInterface{ctrl: ctrl}
	mock.recorder = &MockReaderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderInterface) EXPECT() *MockReaderInterfaceMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReaderInterface) Read(dataType string, data map[string]any) (OutputDataInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", dataType, data)
	ret0, _ := ret[0].(OutputDataInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReaderInterfaceMockRecorder) Read(dataType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReaderInterface)(nil).Read), dataType, data)
}
