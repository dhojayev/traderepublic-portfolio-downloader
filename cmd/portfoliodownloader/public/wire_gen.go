// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/dhojayev/traderepublic-portfolio-downloader/cmd/portfoliodownloader"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api/auth"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api/timeline/activitylog"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api/timeline/details"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api/timeline/transactions"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/api/websocket"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/console"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/database"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/filesystem"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/portfolio/activity"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/portfolio/document"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/portfolio/transaction"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/writer"
	"github.com/google/wire"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

func ProvideNonWritingApp(logger *logrus.Logger) (portfoliodownloader.App, error) {
	client := api.NewClient(logger)
	authClient, err := auth.NewClient(client, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	authService := console.NewAuthService(authClient)
	nilWriter := writer.NewNilWriter()
	reader, err := websocket.NewReader(authService, nilWriter, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	activitylogClient := activitylog.NewClient(reader, logger)
	detailsClient := details.NewClient(reader, logger)
	responseNormalizer := details.NewResponseNormalizer(logger)
	dateResolver := document.NewDateResolver(logger)
	modelBuilder := document.NewModelBuilder(dateResolver, logger)
	downloader := document.NewDownloader(logger)
	processor := activity.NewProcessor(modelBuilder, downloader, logger)
	handler := activity.NewHandler(activitylogClient, detailsClient, responseNormalizer, processor, logger)
	transactionsClient := transactions.NewClient(reader, logger)
	eventTypeResolver := transactions.NewEventTypeResolver(logger)
	typeResolver := details.NewTypeResolver(logger)
	modelBuilderFactory := transaction.NewModelBuilderFactory(typeResolver, modelBuilder, logger)
	db, err := database.NewSQLiteInMemory(logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	repository, err := transaction.ProvideTransactionRepository(db, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	csvEntryFactory := transaction.NewCSVEntryFactory(logger)
	csvReader := filesystem.NewCSVReader(logger)
	csvWriter := filesystem.NewCSVWriter(logger)
	transactionProcessor := transaction.NewProcessor(modelBuilderFactory, repository, csvEntryFactory, csvReader, csvWriter, downloader, logger)
	transactionHandler := transaction.NewHandler(transactionsClient, detailsClient, responseNormalizer, eventTypeResolver, transactionProcessor, logger)
	app := portfoliodownloader.NewApp(handler, transactionHandler, logger)
	return app, nil
}

func ProvideWritingApp(logger *logrus.Logger) (portfoliodownloader.App, error) {
	client := api.NewClient(logger)
	authClient, err := auth.NewClient(client, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	authService := console.NewAuthService(authClient)
	jsonWriter := filesystem.NewJSONWriter(logger)
	reader, err := websocket.NewReader(authService, jsonWriter, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	activitylogClient := activitylog.NewClient(reader, logger)
	detailsClient := details.NewClient(reader, logger)
	responseNormalizer := details.NewResponseNormalizer(logger)
	dateResolver := document.NewDateResolver(logger)
	modelBuilder := document.NewModelBuilder(dateResolver, logger)
	downloader := document.NewDownloader(logger)
	processor := activity.NewProcessor(modelBuilder, downloader, logger)
	handler := activity.NewHandler(activitylogClient, detailsClient, responseNormalizer, processor, logger)
	transactionsClient := transactions.NewClient(reader, logger)
	eventTypeResolver := transactions.NewEventTypeResolver(logger)
	typeResolver := details.NewTypeResolver(logger)
	modelBuilderFactory := transaction.NewModelBuilderFactory(typeResolver, modelBuilder, logger)
	db, err := database.NewSQLiteInMemory(logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	repository, err := transaction.ProvideTransactionRepository(db, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	csvEntryFactory := transaction.NewCSVEntryFactory(logger)
	csvReader := filesystem.NewCSVReader(logger)
	csvWriter := filesystem.NewCSVWriter(logger)
	transactionProcessor := transaction.NewProcessor(modelBuilderFactory, repository, csvEntryFactory, csvReader, csvWriter, downloader, logger)
	transactionHandler := transaction.NewHandler(transactionsClient, detailsClient, responseNormalizer, eventTypeResolver, transactionProcessor, logger)
	app := portfoliodownloader.NewApp(handler, transactionHandler, logger)
	return app, nil
}

// wire.go:

var (
	DefaultSet = wire.NewSet(activitylog.DefaultSet, details.DefaultSet, transactions.DefaultSet, api.DefaultSet, activity.DefaultSet, document.DefaultSet, transaction.DefaultSet, auth.DefaultSet, console.DefaultSet, websocket.DefaultSet, filesystem.CSVSet, database.SqliteInMemorySet, portfoliodownloader.NewApp)

	NonWritingSet = wire.NewSet(
		DefaultSet, writer.NilSet,
	)

	WritingSet = wire.NewSet(
		DefaultSet, filesystem.JSONWriterSet,
	)
)
