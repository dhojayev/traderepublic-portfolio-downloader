// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/dhojayev/traderepublic-portfolio-downloader/cmd/portfoliodownloader"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/database"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/filesystem"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/reader"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/traderepublc/api/websocket"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/traderepublc/portfolio/activity"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/traderepublc/portfolio/transaction"
	"github.com/dhojayev/traderepublic-portfolio-downloader/internal/writer"
	"github.com/google/wire"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

func ProvideLocalApp(baseDir string, logger *logrus.Logger) (portfoliodownloader.App, error) {
	jsonReader := reader.NewJSONReader(baseDir, logger)
	nilWriter := writer.NewNilWriter()
	handler, err := activity.ProvideHandler(jsonReader, nilWriter, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	db, err := database.NewSQLiteOnFS(logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	transactionHandler, err := transaction.ProvideHandler(jsonReader, nilWriter, db, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	app := portfoliodownloader.NewApp(handler, transactionHandler, logger)
	return app, nil
}

func ProvideRemoteApp(logger *logrus.Logger) (portfoliodownloader.App, error) {
	jsonWriter := filesystem.NewJSONWriter(logger)
	websocketReader, err := websocket.ProvideReader(jsonWriter, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	handler, err := activity.ProvideHandler(websocketReader, jsonWriter, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	db, err := database.NewSQLiteOnFS(logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	transactionHandler, err := transaction.ProvideHandler(websocketReader, jsonWriter, db, logger)
	if err != nil {
		return portfoliodownloader.App{}, err
	}
	app := portfoliodownloader.NewApp(handler, transactionHandler, logger)
	return app, nil
}

// wire.go:

var (
	DefaultSet = wire.NewSet(database.SqliteOnFilesystemSet, activity.ProvideHandler, transaction.ProvideHandler, portfoliodownloader.NewApp, wire.Bind(new(activity.HandlerInterface), new(activity.Handler)), wire.Bind(new(transaction.HandlerInterface), new(transaction.Handler)))

	RemoteSet = wire.NewSet(
		DefaultSet, websocket.ProvideReader, filesystem.JSONWriterSet, wire.Bind(new(reader.Interface), new(*websocket.Reader)),
	)

	LocalSet = wire.NewSet(
		DefaultSet, reader.DefaultSet, writer.NilSet,
	)
)
